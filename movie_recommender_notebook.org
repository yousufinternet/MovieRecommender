# -*- org-src-preserve-indentation: t; org-edit-src-content: 0; -*-
#+TITLE: Basic Movie Recommender
#+SUBTITLE: Following this tutorial: https://bit.ly/3rKsvnK
#+AUTHOR: Yusuf Mohammad
#+date: \today
#+OPTIONS: toc:nil

* Prerequisites
  
#+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

#+end_src

#+RESULTS:


* reading IMDB datasets

  #+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
title_basics = pd.read_csv(
	'IMDBDataSets/title.basics.tsv', sep='\t', na_values='\\N')

title_ratings = pd.read_csv(
      'IMDBDataSets/title.ratings.tsv', sep='\t', na_values='\\N')

title_crew = pd.read_csv(
      'IMDBDataSets/title.crew.tsv', sep='\t', na_values='\\N')
  #+end_src

  #+RESULTS:
  : sys:1: DtypeWarning: Columns (7) have mixed types.Specify dtype option on import or set low_memory=False.
  
#+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
print(title_basics.columns)
print(title_ratings.columns)
print(title_crew.columns)
#+end_src

#+RESULTS:
: Index(['tconst', 'titleType', 'primaryTitle', 'originalTitle', 'isAdult',
:        'startYear', 'endYear', 'runtimeMinutes', 'genres'],
:       dtype='object')
: Index(['tconst', 'averageRating', 'numVotes'], dtype='object')
: Index(['tconst', 'directors', 'writers'], dtype='object')

* Fix genres showing in runtimeMinutes column 

  #+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
nonnull_runtimeminutes = title_basics.runtimeMinutes[title_basics.runtimeMinutes.notna()]
text_indexes = nonnull_runtimeminutes[
    nonnull_runtimeminutes.astype(str).str.match(r'^\D.*')].index
title_basics.loc[text_indexes, 'genres'] = title_basics.loc[text_indexes, 'runtimeMinutes'].tolist()
title_basics.loc[text_indexes, 'runtimeMinutes'] = np.nan

  #+end_src

  #+RESULTS:

* Add ratings to main table  

  #+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
title_basics = title_basics.join(title_ratings.set_index('tconst'), on='tconst')
  #+end_src

  #+RESULTS:

  #+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
print(title_basics[title_basics.averageRating.notna() & title_basics.numVotes.notna()].shape)

fil_title_basics = title_basics[['tconst', 'primaryTitle', 'originalTitle', 'isAdult', 'startYear', 'genres', 'averageRating', 'numVotes']].dropna(how='any')

fil_title_basics = fil_title_basics.join(title_basics.set_index('tconst')[['endYear']], on='tconst')
print(fil_title_basics.columns)
  #+end_src

  #+RESULTS:
  : (1005192, 11)
  : Index(['tconst', 'primaryTitle', 'originalTitle', 'isAdult', 'startYear',
  :        'genres', 'averageRating', 'numVotes', 'endYear'],
  :       dtype='object')

* Add writers and directors

** load names table
  #+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
name_basics = pd.read_csv('IMDBDataSets/name.basics.tsv', sep='\t', na_values='\\n', usecols=['nconst', 'primaryName'])
print(name_basics.columns)
print(name_basics.head())
  #+end_src

  #+RESULTS:
  : Index(['nconst', 'primaryName'], dtype='object')
  :       nconst      primaryName
  : 0  nm0000001     Fred Astaire
  : 1  nm0000002    Lauren Bacall
  : 2  nm0000003  Brigitte Bardot
  : 3  nm0000004     John Belushi
  : 4  nm0000005   Ingmar Bergman

** convert nconst in title_crew to actual names
#+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes

#+end_src

* interesting features for similarity

  #+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
print(fil_title_basics.columns)
features = ['primaryTitle', 'genres', 'averageRating', 'startYear']
  #+end_src

  #+RESULTS:
  : Index(['tconst', 'primaryTitle', 'originalTitle', 'isAdult', 'startYear',
  :        'genres', 'averageRating', 'numVotes', 'endYear'],
  :       dtype='object')

** Combine them into a single column

   #+begin_src python :session (concat "*Python: " (file-name-nondirectory (buffer-file-name)) "*") :results output :exports both :tangle yes
def combine_features(row):
   #+end_src

